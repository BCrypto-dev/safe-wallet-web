diff --git a/node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/EthersAdapter.js b/node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/EthersAdapter.js
index 59d054d..6d70c9d 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/EthersAdapter.js
+++ b/node_modules/@safe-global/protocol-kit/dist/src/adapters/ethers/EthersAdapter.js
@@ -64,16 +64,18 @@ class EthersAdapter {
     }
     async getSafeContract({ safeVersion, singletonDeployment, customContractAddress }) {
         const chainId = await this.getChainId();
-        const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        let contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
         if (!contractAddress) {
-            throw new Error('Invalid SafeProxy contract address');
+            contractAddress = '0x3E5c63644E683549055b9Be8653de26E0B4CD36E';
+            //throw new Error('Invalid SafeProxy contract address');
         }
         const signerOrProvider = __classPrivateFieldGet(this, _EthersAdapter_signer, "f") || __classPrivateFieldGet(this, _EthersAdapter_provider, "f");
         return (0, contractInstancesEthers_1.getSafeContractInstance)(safeVersion, contractAddress, signerOrProvider);
     }
     async getSafeProxyFactoryContract({ safeVersion, singletonDeployment, customContractAddress }) {
         const chainId = await this.getChainId();
-        const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        //const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        const contractAddress = '0xa6B71E26C5e0845f74c812102Ca7114b6a896AB2';
         if (!contractAddress) {
             throw new Error('Invalid SafeProxyFactory contract address');
         }
@@ -82,7 +84,8 @@ class EthersAdapter {
     }
     async getMultiSendContract({ safeVersion, singletonDeployment, customContractAddress }) {
         const chainId = await this.getChainId();
-        const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        //const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        const contractAddress = '0xA238CBeb142c10Ef7Ad8442C6D1f9E89e07e7761';
         if (!contractAddress) {
             throw new Error('Invalid MultiSend contract address');
         }
@@ -91,7 +94,8 @@ class EthersAdapter {
     }
     async getMultiSendCallOnlyContract({ safeVersion, singletonDeployment, customContractAddress }) {
         const chainId = await this.getChainId();
-        const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        //const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        const contractAddress = '0x40A2aCCbd92BCA938b02010E17A5b8929b49130D';
         if (!contractAddress) {
             throw new Error('Invalid MultiSendCallOnly contract address');
         }
@@ -100,7 +104,8 @@ class EthersAdapter {
     }
     async getCompatibilityFallbackHandlerContract({ safeVersion, singletonDeployment, customContractAddress }) {
         const chainId = await this.getChainId();
-        const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        //const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        const contractAddress = '0xf48f2B2d2a534e402487b3ee7C18c33Aec0Fe5e4';
         if (!contractAddress) {
             throw new Error('Invalid CompatibilityFallbackHandler contract address');
         }
@@ -109,7 +114,8 @@ class EthersAdapter {
     }
     async getSignMessageLibContract({ safeVersion, singletonDeployment, customContractAddress }) {
         const chainId = await this.getChainId();
-        const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        //const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        const contractAddress = '0xA65387F16B013cf2Af4605Ad8aA5ec25a2cbA3a2';
         if (!contractAddress) {
             throw new Error('Invalid SignMessageLib contract address');
         }
@@ -118,7 +124,8 @@ class EthersAdapter {
     }
     async getCreateCallContract({ safeVersion, singletonDeployment, customContractAddress }) {
         const chainId = await this.getChainId();
-        const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        //const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        const contractAddress = '0x7cbB62EaA69F79e6873cD1ecB2392971036cFAa4';
         if (!contractAddress) {
             throw new Error('Invalid CreateCall contract address');
         }
@@ -127,7 +134,8 @@ class EthersAdapter {
     }
     async getSimulateTxAccessorContract({ safeVersion, singletonDeployment, customContractAddress }) {
         const chainId = await this.getChainId();
-        const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        //const contractAddress = customContractAddress ?? singletonDeployment?.networkAddresses[chainId.toString()];
+        const contractAddress = '0x59AD6735bCd8152B84860Cb256dD9e96b85F69Da';
         if (!contractAddress) {
             throw new Error('Invalid SimulateTxAccessor contract address');
         }
diff --git a/node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js b/node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js
index cfc40d8..898355f 100644
--- a/node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js
+++ b/node_modules/@safe-global/protocol-kit/dist/src/utils/eip-3770/config.js
@@ -113,6 +113,8 @@ exports.networks = [
     { chainId: 5700n, shortName: 'tsys' },
     { chainId: 6102n, shortName: 'cascadia' },
     { chainId: 7001n, shortName: 'zetachain-athens' },
+    { chainId: 7171n, shortName: 'brock' },
+    { chainId: 7771n, shortName: 'brocktest' },
     { chainId: 7332n, shortName: 'EON' },
     { chainId: 7341n, shortName: 'shyft' },
     { chainId: 7700n, shortName: 'canto' },
